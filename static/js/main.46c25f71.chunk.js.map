{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["API_URL","getTodosByStatus","status","fetch","then","response","json","TodoList","state","todos","query","setStatus","event","setState","target","value","setQuery","getTodosByQuery","queryLoverCase","toLowerCase","filter","todo","title","includes","this","loadTodosByStatus","_","prevState","a","visibleTodos","className","type","id","placeholder","onChange","map","classNames","TodoList__item","completed","checked","button","onClick","props","setSelectedUserId","userId","React","Component","CurrentUser","selectedUser","loadUsers","prevProps","name","email","phone","clearSelectedUser","App","selectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46c25f71.chunk.js","sourcesContent":["const API_URL = 'https://mate.academy/students-api';\n\nexport function getTodos(): Promise<Todo[]> {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function getUserById(userId: number): Promise<User> {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n\nexport function getTodosByStatus(status: string): Promise<Todo[]> {\n  if (status === 'true' || status === 'false') {\n    return fetch(`${API_URL}/todos?completed=${status}`)\n      .then(response => response.json());\n  }\n\n  return getTodos();\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport { getTodosByStatus } from '../../api/api';\n\ntype Props = {\n  setSelectedUserId: (userId: number) => void,\n};\n\ntype State = {\n  todos: Todo[],\n  status: string,\n  query: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    status: 'all',\n    query: '',\n  };\n\n  componentDidMount() {\n    this.loadTodosByStatus();\n  }\n\n  componentDidUpdate(_: {}, prevState: State) {\n    if (this.state.status !== prevState.status) {\n      this.loadTodosByStatus();\n    }\n  }\n\n  setStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ status: event.target.value });\n  };\n\n  setQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value });\n  };\n\n  getTodosByQuery = () => {\n    const { todos, query } = this.state;\n    const queryLoverCase = query.toLowerCase();\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(queryLoverCase)));\n  };\n\n  async loadTodosByStatus() {\n    const { status } = this.state;\n    const todos = await getTodosByStatus(status);\n\n    this.setState({ todos });\n  }\n\n  render() {\n    const { query, status } = this.state;\n    const visibleTodos = this.getTodosByQuery();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form className=\"ui form\">\n          <div className=\"two fields\">\n            <div className=\"field\">\n              <label>Type search word</label>\n              <input\n                type=\"text\"\n                id=\"search-query\"\n                placeholder=\"Type search word\"\n                value={query}\n                onChange={this.setQuery}\n              />\n            </div>\n            <div className=\"field\">\n              <label>Choose status</label>\n              <select\n                className=\"ui fluid dropdown\"\n                value={status}\n                onChange={this.setStatus}\n              >\n                <option value=\"all\"> All </option>\n                <option value=\"false\"> Active </option>\n                <option value=\"true\"> Completed </option>\n              </select>\n            </div>\n          </div>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                className={classNames({\n                  TodoList__item: true,\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames({\n                    button: true,\n                    'TodoList__user-button': true,\n                    'TodoList__user-button--selected': todo.completed,\n                  })}\n                  type=\"button\"\n                  onClick={() => this.props.setSelectedUserId(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/api';\n\ntype Props = {\n  userId: number,\n  clearSelectedUser: () => void,\n};\n\ntype State = {\n  selectedUser: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    selectedUser: null,\n  };\n\n  componentDidMount() {\n    this.loadUsers();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadUsers();\n    }\n  }\n\n  async loadUsers() {\n    const selectedUser = await getUserById(this.props.userId);\n\n    this.setState({ selectedUser });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <>\n        {selectedUser && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>{`Selected user: ${selectedUser.id}`}</span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n            <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n            <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={this.props.clearSelectedUser}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  setSelectedUserId = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const {\n      selectedUserId,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            setSelectedUserId={this.setSelectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}